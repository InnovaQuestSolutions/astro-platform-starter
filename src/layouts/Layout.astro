---
import '../../src/styles/globals.css';
import '@fontsource-variable/inter/wght.css';
import interWoff2 from '@fontsource-variable/inter/files/inter-latin-wght-normal.woff2?url';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

interface Props {
    title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <title>Chat Widget</title>
    
    <script>
       
      (function() {
    // Default configuration
    const defaultConfig = {
        webhook: {
            url: 'https://n8n.innovaquest.solutions/webhook/bd6697b2-4dc2-4943-a4d4-f3bc38d15092',
            route: 'general'
        },
        branding: {
            logo: 'https://play-lh.googleusercontent.com/h61OpMEtKOlyfeGsub4-rSDxsNdFtBLVtBpHSVdO-dma43qBVTuj2bsWkUcDuItc',
            name: 'MyAngels',
            welcomeText: 'Hello my ðŸ‘¼, how can I help? ',
            responseTimeText: 'I am here for you',
            poweredBy: {
                text: 'Powered by MyAngels',
                link: 'https://myangels.com'
            }
        },
        style: {
            primaryColor: '#854fff',
            secondaryColor: '#6b3fd4',
            position: 'right',
            backgroundColor: '#16131c',
            fontColor: '#ffffff'
        }
    };

    // Merge user config with defaults
    const config = window.ChatWidgetConfig ? 
        {
            webhook: { ...defaultConfig.webhook, ...window.ChatWidgetConfig.webhook },
            branding: { ...defaultConfig.branding, ...window.ChatWidgetConfig.branding },
            style: { ...defaultConfig.style, ...window.ChatWidgetConfig.style }
        } : defaultConfig;

    // Prevent multiple initializations
    if (window.MyAngelsChatWidgetInitialized) return;
    window.MyAngelsChatWidgetInitialized = true;

    // Ensure markdown libraries are loaded before initializing the chat
    let markedLoaded = false;
    let highlightLoaded = false;

    // Load required external dependencies
    loadDependencies();

    // Create and append CSS styles
    appendStyles();

    // Create the chat widget elements
    createChatWidget();

    // Initialize widget functionality with delay to ensure dependencies are loaded
    waitForDependencies(() => {
        initWidgetFunctionality();
    });

    /**
     * Load external dependencies (Marked.js and Highlight.js)
     */
    function loadDependencies() {
        // Load Marked.js for Markdown parsing
        const markedScript = document.createElement('script');
        markedScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/marked/4.3.0/marked.min.js';
        markedScript.onload = function() {
            console.log('Marked.js loaded successfully');
            markedLoaded = true;
        };
        document.head.appendChild(markedScript);

        // Load Highlight.js for code syntax highlighting
        const highlightCssLink = document.createElement('link');
        highlightCssLink.rel = 'stylesheet';
        highlightCssLink.href = 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-dark.min.css';
        document.head.appendChild(highlightCssLink);

        const highlightJsScript = document.createElement('script');
        highlightJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js';
        highlightJsScript.onload = function() {
            console.log('Highlight.js loaded successfully');
            highlightLoaded = true;
        };
        document.head.appendChild(highlightJsScript);

        // Load Geist font
        const fontLink = document.createElement('link');
        fontLink.rel = 'stylesheet';
        fontLink.href = 'https://cdn.jsdelivr.net/npm/geist@1.0.0/dist/fonts/geist-sans/style.css';
        document.head.appendChild(fontLink);
    }

    /**
     * Wait for dependencies to be loaded
     */
    function waitForDependencies(callback, attempts = 0) {
        if (window.marked && window.hljs) {
            console.log('All dependencies loaded, initializing chat widget');
            callback();
            return;
        }
        
        if (attempts > 20) { // 10 seconds timeout
            console.warn('Timed out waiting for dependencies, initializing anyway');
            callback();
            return;
        }
        
        console.log('Waiting for dependencies to load...');
        setTimeout(() => waitForDependencies(callback, attempts + 1), 500);
    }

    /**
     * Append CSS styles to document head
     */
    function appendStyles() {
        const styles = `
            .myangels-chat {
                --chat-primary: ${config.style.primaryColor};
                --chat-secondary: ${config.style.secondaryColor};
                --chat-bg: ${config.style.backgroundColor};
                --chat-text: ${config.style.fontColor};
                --chat-shadow: rgba(0, 0, 0, 0.2);
                --chat-border: rgba(133, 79, 255, 0.2);
                font-family: 'Geist Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                color: var(--chat-text);
                line-height: 1.5;
                font-size: 14px;
            }

            /* Chat toggle button */
            .myangels-chat .chat-toggle {
                position: fixed;
                bottom: 20px;
                ${config.style.position}: 20px;
                width: 60px;
                height: 60px;
                border-radius: 50%;
                background: linear-gradient(135deg, var(--chat-primary) 0%, var(--chat-secondary) 100%);
                border: none;
                cursor: pointer;
                box-shadow: 0 4px 16px rgba(133, 79, 255, 0.3);
                z-index: 999999;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: transform 0.3s ease, box-shadow 0.3s ease, opacity 0.3s ease;
                color: white;
            }

            /* Hide toggle button when chat is open */
            .myangels-chat.chat-open .chat-toggle {
                opacity: 0;
                visibility: hidden;
            }

            .myangels-chat .chat-toggle:hover {
                transform: scale(1.05);
                box-shadow: 0 6px 24px rgba(133, 79, 255, 0.4);
            }

            .myangels-chat .chat-toggle svg {
                width: 24px;
                height: 24px;
                fill: currentColor;
            }

            /* Main chat container */
            .myangels-chat .chat-container {
                position: fixed;
                bottom: 20px;
                ${config.style.position}: 20px;
                width: 380px;
                height: 600px;
                background: var(--chat-bg);
                border-radius: 12px;
                box-shadow: 0 10px 40px var(--chat-shadow);
                border: 1px solid var(--chat-border);
                overflow: hidden;
                display: none;
                flex-direction: column;
                z-index: 999998;
                transition: all 0.3s ease;
            }

            .myangels-chat .chat-container.open {
                display: flex;
                animation: chat-fade-in 0.3s ease forwards;
            }

            @keyframes chat-fade-in {
                from { opacity: 0; transform: translateY(20px); }
                to { opacity: 1; transform: translateY(0); }
            }

            /* Header */
            .myangels-chat .chat-header {
                display: flex;
                align-items: center;
                padding: 16px;
                border-bottom: 1px solid var(--chat-border);
                z-index: 10;
            }

            .myangels-chat .chat-header-logo {
                width: 32px;
                height: 32px;
                border-radius: 50%;
                margin-right: 12px;
            }

            .myangels-chat .chat-header-title {
                flex: 1;
                font-size: 18px;
                font-weight: 500;
            }

            .myangels-chat .chat-header-actions {
                display: flex;
                gap: 10px;
            }

            .myangels-chat .chat-header-button {
                background: none;
                border: none;
                color: var(--chat-text);
                opacity: 0.7;
                cursor: pointer;
                padding: 5px;
                border-radius: 4px;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.2s ease;
            }

            .myangels-chat .chat-header-button:hover {
                opacity: 1;
                background-color: rgba(133, 79, 255, 0.1);
            }

            .myangels-chat .chat-header-button svg {
                width: 18px;
                height: 18px;
                stroke: currentColor;
            }

            /* Menu dropdown */
            .myangels-chat .chat-menu {
                position: relative;
            }

            .myangels-chat .chat-menu-dropdown {
                position: absolute;
                top: 100%;
                right: 0;
                width: 220px;
                background: var(--chat-bg);
                border-radius: 8px;
                box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
                border: 1px solid var(--chat-border);
                z-index: 100;
                display: none;
                overflow: hidden;
                margin-top: 8px;
            }

            .myangels-chat .chat-menu-dropdown.show {
                display: block;
                animation: dropdown-fade-in 0.2s ease forwards;
            }

            @keyframes dropdown-fade-in {
                from { opacity: 0; transform: translateY(-10px); }
                to { opacity: 1; transform: translateY(0); }
            }

            .myangels-chat .chat-menu-item {
                padding: 12px 16px;
                display: flex;
                align-items: center;
                gap: 12px;
                cursor: pointer;
                transition: background 0.2s ease;
            }

            .myangels-chat .chat-menu-item:hover {
                background: rgba(133, 79, 255, 0.1);
            }

            .myangels-chat .chat-menu-item svg {
                width: 16px;
                height: 16px;
                stroke: var(--chat-text);
            }

            .myangels-chat .chat-menu-divider {
                height: 1px;
                background: var(--chat-border);
                margin: 6px 0;
            }

            /* Chat views container */
            .myangels-chat .chat-views {
                flex: 1;
                display: flex;
                overflow: hidden;
            }

            /* Welcome view */
            .myangels-chat .chat-welcome {
                flex: 1;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                padding: 30px;
                text-align: center;
                display: none; /* Hide by default, show only when needed */
            }

            .myangels-chat .chat-welcome-title {
                font-size: 22px;
                font-weight: 600;
                margin-bottom: 20px;
            }

            .myangels-chat .chat-welcome-button {
                display: flex;
                align-items: center;
                gap: 10px;
                background: linear-gradient(135deg, var(--chat-primary) 0%, var(--chat-secondary) 100%);
                color: white;
                border: none;
                border-radius: 8px;
                padding: 14px 24px;
                font-size: 16px;
                font-weight: 500;
                cursor: pointer;
                transition: transform 0.2s ease, box-shadow 0.2s ease;
                box-shadow: 0 4px 12px rgba(133, 79, 255, 0.2);
                margin-bottom: 20px;
            }

            .myangels-chat .chat-welcome-button:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 16px rgba(133, 79, 255, 0.3);
            }

            .myangels-chat .chat-welcome-response {
                font-size: 14px;
                opacity: 0.7;
            }

            /* Chat messages view */
            .myangels-chat .chat-messages-view {
                display: none;
                flex-direction: column;
                flex: 1;
                width: 100%;
            }

            .myangels-chat .chat-messages-view.active {
                display: flex;
            }

            .myangels-chat .chat-messages {
                flex: 1;
                overflow-y: auto;
                padding: 20px;
                scroll-behavior: smooth;
                display: flex;
                flex-direction: column;
                gap: 16px;
            }

            .myangels-chat .chat-messages::-webkit-scrollbar {
                width: 6px;
            }

            .myangels-chat .chat-messages::-webkit-scrollbar-track {
                background: transparent;
            }

            .myangels-chat .chat-messages::-webkit-scrollbar-thumb {
                background: rgba(133, 79, 255, 0.3);
                border-radius: 10px;
            }

            .myangels-chat .chat-message {
                display: flex;
                flex-direction: column;
                max-width: 85%;
                margin-bottom: 4px;
                animation: message-fade-in 0.3s ease forwards;
            }

            @keyframes message-fade-in {
                from { opacity: 0; transform: translateY(10px); }
                to { opacity: 1; transform: translateY(0); }
            }

            .myangels-chat .chat-message.user {
                align-self: flex-end;
            }

            .myangels-chat .chat-message.bot {
                align-self: flex-start;
            }

            .myangels-chat .chat-message-bubble {
                padding: 12px 16px;
                border-radius: 18px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                position: relative;
                transition: transform 0.2s ease;
                width: auto;
                display: inline-block;
            }

            .myangels-chat .chat-message-bubble:hover {
                transform: translateY(-2px);
            }

            .myangels-chat .chat-message.user .chat-message-bubble {
                background: linear-gradient(135deg, var(--chat-primary) 0%, var(--chat-secondary) 100%);
                color: white;
                border-top-right-radius: 4px;
                align-self: flex-end;
            }

            .myangels-chat .chat-message.bot .chat-message-bubble {
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid var(--chat-border);
                border-top-left-radius: 4px;
                align-self: flex-start;
            }

            .myangels-chat .chat-message-time {
                font-size: 12px;
                opacity: 0.7;
                margin-top: 4px;
                align-self: flex-end;
            }

            .myangels-chat .chat-message.bot .chat-message-time {
                align-self: flex-start;
            }

            /* Loading indicator */
            .myangels-chat .chat-loading {
                display: flex;
                align-self: flex-start;
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid var(--chat-border);
                padding: 12px 16px;
                border-radius: 18px;
                border-top-left-radius: 4px;
                margin-bottom: 16px;
                animation: message-fade-in 0.3s ease forwards;
            }

            .myangels-chat .chat-loading-dots {
                display: flex;
                gap: 6px;
            }

            .myangels-chat .chat-loading-dot {
                width: 8px;
                height: 8px;
                border-radius: 50%;
                background: var(--chat-primary);
                opacity: 0.6;
                animation: dot-flash 1.4s infinite alternate;
            }

            .myangels-chat .chat-loading-dot:nth-child(2) {
                animation-delay: 0.2s;
            }

            .myangels-chat .chat-loading-dot:nth-child(3) {
                animation-delay: 0.4s;
            }

            @keyframes dot-flash {
                0% { opacity: 0.2; transform: translateY(0); }
                100% { opacity: 1; transform: translateY(-4px); }
            }

            /* Input area */
            .myangels-chat .chat-input {
                padding: 15px;
                border-top: 1px solid var(--chat-border);
                display: flex;
                gap: 10px;
                align-items: flex-end;
            }

            .myangels-chat .chat-input-field {
                flex: 1;
                padding: 12px;
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid var(--chat-border);
                border-radius: 8px;
                color: var(--chat-text);
                font-family: inherit;
                font-size: 14px;
                resize: none;
                height: 44px;
                max-height: 150px;
                overflow-y: auto;
                transition: border-color 0.2s ease, background 0.2s ease;
            }

            .myangels-chat .chat-input-field:focus {
                outline: none;
                border-color: var(--chat-primary);
                background: rgba(255, 255, 255, 0.08);
            }

            .myangels-chat .chat-input-field::placeholder {
                color: rgba(255, 255, 255, 0.5);
            }

            .myangels-chat .chat-input-button {
                background: linear-gradient(135deg, var(--chat-primary) 0%, var(--chat-secondary) 100%);
                color: white;
                border: none;
                border-radius: 8px;
                padding: 12px 20px;
                font-weight: 500;
                cursor: pointer;
                transition: transform 0.2s ease, box-shadow 0.2s ease;
                white-space: nowrap;
            }

            .myangels-chat .chat-input-button:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(133, 79, 255, 0.3);
            }

            /* Footer */
            .myangels-chat .chat-footer {
                padding: 10px;
                text-align: center;
                border-top: 1px solid var(--chat-border);
                font-size: 12px;
            }

            .myangels-chat .chat-footer a {
                color: var(--chat-primary);
                text-decoration: none;
                opacity: 0.8;
                transition: opacity 0.2s ease;
            }

            .myangels-chat .chat-footer a:hover {
                opacity: 1;
            }

            /* Conversation view */
            .myangels-chat .chat-conversations-view {
                display: none;
                flex-direction: column;
                flex: 1;
                width: 100%;
            }

            .myangels-chat .chat-conversations-view.active {
                display: flex;
            }

            .myangels-chat .chat-conversations-header {
                padding: 16px;
                font-weight: 500;
                border-bottom: 1px solid var(--chat-border);
            }

            .myangels-chat .chat-conversations-list {
                flex: 1;
                overflow-y: auto;
            }

            .myangels-chat .chat-conversation-item {
                display: flex;
                padding: 16px;
                border-bottom: 1px solid var(--chat-border);
                cursor: pointer;
                transition: background 0.2s ease;
            }

            .myangels-chat .chat-conversation-item:hover {
                background: rgba(133, 79, 255, 0.1);
            }

            .myangels-chat .chat-conversation-item.active {
                background: rgba(133, 79, 255, 0.15);
            }

            .myangels-chat .chat-conversation-content {
                flex: 1;
                overflow: hidden;
            }

            .myangels-chat .chat-conversation-title {
                font-weight: 500;
                margin-bottom: 5px;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }

            .myangels-chat .chat-conversation-preview {
                opacity: 0.7;
                font-size: 13px;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }

            .myangels-chat .chat-conversation-time {
                margin-left: 15px;
                opacity: 0.6;
                font-size: 12px;
                white-space: nowrap;
            }

            .myangels-chat .chat-empty-state {
                flex: 1;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                padding: 30px;
                text-align: center;
            }

            .myangels-chat .chat-empty-icon {
                margin-bottom: 20px;
                opacity: 0.3;
            }

            .myangels-chat .chat-empty-text {
                margin-bottom: 20px;
                opacity: 0.7;
            }

            /* Markdown content styling */
            .myangels-chat .chat-markdown {
                line-height: 1.6;
                width: 100%;
                overflow: auto;
            }

            .myangels-chat .chat-markdown p {
                margin: 0 0 12px 0;
            }

            .myangels-chat .chat-markdown p:last-child {
                margin-bottom: 0;
            }

            .myangels-chat .chat-markdown h1,
            .myangels-chat .chat-markdown h2,
            .myangels-chat .chat-markdown h3 {
                margin: 16px 0 8px 0;
                font-weight: 600;
                line-height: 1.25;
            }

            .myangels-chat .chat-markdown h1 {
                font-size: 1.5em;
                border-bottom: 1px solid var(--chat-border);
                padding-bottom: 4px;
            }

            .myangels-chat .chat-markdown h2 {
                font-size: 1.3em;
                border-bottom: 1px solid var(--chat-border);
                padding-bottom: 4px;
            }

            .myangels-chat .chat-markdown h3 {
                font-size: 1.1em;
            }

            .myangels-chat .chat-markdown ul,
            .myangels-chat .chat-markdown ol {
                margin: 8px 0 16px 0;
                padding-left: 20px;
            }

            .myangels-chat .chat-markdown li {
                margin-bottom: 4px;
            }

            .myangels-chat .chat-markdown a {
                color: #a58aff;
                text-decoration: none;
            }

            .myangels-chat .chat-markdown a:hover {
                text-decoration: underline;
            }

            .myangels-chat .chat-markdown blockquote {
                border-left: 4px solid var(--chat-primary);
                margin: 8px 0;
                padding: 4px 0 4px 16px;
                opacity: 0.8;
                font-style: italic;
            }

            .myangels-chat .chat-markdown code {
                background: rgba(0, 0, 0, 0.3);
                padding: 2px 4px;
                border-radius: 4px;
                font-family: monospace;
                font-size: 0.9em;
            }

            .myangels-chat .chat-markdown pre {
                background: rgba(0, 0, 0, 0.3);
                padding: 12px;
                border-radius: 8px;
                font-family: monospace;
                overflow-x: auto;
                margin: 12px 0;
                border-left: 3px solid var(--chat-primary);
            }

            .myangels-chat .chat-markdown pre code {
                background: transparent;
                padding: 0;
                border-radius: 0;
                font-size: 0.9em;
                color: #f8f8f2;
                white-space: pre;
            }

            .myangels-chat .chat-markdown table {
                border-collapse: collapse;
                width: 100%;
                margin: 16px 0;
            }

            .myangels-chat .chat-markdown th,
            .myangels-chat .chat-markdown td {
                border: 1px solid var(--chat-border);
                padding: 8px;
                text-align: left;
            }

            .myangels-chat .chat-markdown th {
                background: rgba(133, 79, 255, 0.1);
                font-weight: 600;
            }

            .myangels-chat .chat-markdown img {
                max-width: 100%;
                border-radius: 8px;
                margin: 12px 0;
            }

            /* Mobile styles */
            @media (max-width: 600px) {
                .myangels-chat .chat-container {
                    width: 100%;
                    height: 100%;
                    bottom: 0;
                    ${config.style.position}: 0;
                    border-radius: 0;
                    border: none;
                }
            }
        `;

        const styleElement = document.createElement('style');
        styleElement.textContent = styles;
        document.head.appendChild(styleElement);
    }

    /**
     * Create and append chat widget elements
     */
    function createChatWidget() {
        // Main container
        const widgetContainer = document.createElement('div');
        widgetContainer.className = 'myangels-chat';

        // Toggle button
        const toggleButton = document.createElement('button');
        toggleButton.className = 'chat-toggle';
        toggleButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M12 2C6.477 2 2 6.477 2 12c0 1.821.487 3.53 1.338 5L2.5 21.5l4.5-.838A9.955 9.955 0 0012 22c5.523 0 10-4.477 10-10S17.523 2 12 2zm0 18c-1.476 0-2.886-.313-4.156-.878l-3.156.586.586-3.156A7.962 7.962 0 014 12c0-4.411 3.589-8 8-8s8 3.589 8 8-3.589 8-8 8z"/>
            </svg>
        `;

        // Chat container
        const chatContainer = document.createElement('div');
        chatContainer.className = 'chat-container';

        // Header section
        const header = document.createElement('div');
        header.className = 'chat-header';
        header.innerHTML = `
            <img src="${config.branding.logo}" alt="${config.branding.name}" class="chat-header-logo">
            <div class="chat-header-title">${config.branding.name}</div>
            <div class="chat-header-actions">
                <div class="chat-menu">
                    <button class="chat-header-button chat-menu-toggle" title="Menu">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <circle cx="12" cy="12" r="1"></circle>
                            <circle cx="19" cy="12" r="1"></circle>
                            <circle cx="5" cy="12" r="1"></circle>
                        </svg>
                    </button>
                    <div class="chat-menu-dropdown">
                        <div class="chat-menu-item chat-new-conversation">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <line x1="12" y1="5" x2="12" y2="19"></line>
                                <line x1="5" y1="12" x2="19" y2="12"></line>
                            </svg>
                            New conversation
                        </div>
                        <div class="chat-menu-item chat-view-conversations">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                            </svg>
                            View conversations
                        </div>
                        <div class="chat-menu-divider"></div>
                        <div class="chat-menu-item chat-download-transcript">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                                <polyline points="7 10 12 15 17 10"></polyline>
                                <line x1="12" y1="15" x2="12" y2="3"></line>
                            </svg>
                            Download transcript
                        </div>
                    </div>
                </div>
                <button class="chat-header-button chat-close" title="Close">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <line x1="18" y1="6" x2="6" y2="18"></line>
                        <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                </button>
            </div>
        `;

        // Views container
        const viewsContainer = document.createElement('div');
        viewsContainer.className = 'chat-views';

        // Welcome view
        const welcomeView = document.createElement('div');
        welcomeView.className = 'chat-welcome';
        welcomeView.innerHTML = `
            <h2 class="chat-welcome-title">${config.branding.welcomeText}</h2>
            <button class="chat-welcome-button">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                </svg>
                Send a message
            </button>
            <p class="chat-welcome-response">${config.branding.responseTimeText}</p>
        `;

        // Chat messages view
        const messagesView = document.createElement('div');
        messagesView.className = 'chat-messages-view';
        messagesView.innerHTML = `
            <div class="chat-messages"></div>
            <div class="chat-input">
                <textarea class="chat-input-field" placeholder="Type your message..." rows="1"></textarea>
                <button class="chat-input-button">Send</button>
            </div>
            <div class="chat-footer">
                <a href="${config.branding.poweredBy.link}" target="_blank">${config.branding.poweredBy.text}</a>
            </div>
        `;

        // Conversations view
        const conversationsView = document.createElement('div');
        conversationsView.className = 'chat-conversations-view';
        conversationsView.innerHTML = `
            <div class="chat-conversations-header">Recent conversations</div>
            <div class="chat-conversations-list"></div>
        `;

        // Assemble the widget
        viewsContainer.appendChild(welcomeView);
        viewsContainer.appendChild(messagesView);
        viewsContainer.appendChild(conversationsView);
        
        chatContainer.appendChild(header);
        chatContainer.appendChild(viewsContainer);
        
        widgetContainer.appendChild(toggleButton);
        widgetContainer.appendChild(chatContainer);
        
        document.body.appendChild(widgetContainer);
    }

    /**
     * Initialize widget functionality
     */
    function initWidgetFunctionality() {
        // Variables
        let conversations = [];
        let currentSessionId = '';
        let chatMessages = [];
        let activeConversationIndex = -1;
        
        // Track first visit
        const isFirstVisit = localStorage.getItem('myangels_has_visited') !== 'true';

        // DOM elements
        const chatWidget = document.querySelector('.myangels-chat');
        const chatContainer = document.querySelector('.myangels-chat .chat-container');
        const toggleButton = document.querySelector('.myangels-chat .chat-toggle');
        const closeButton = document.querySelector('.myangels-chat .chat-close');
        const menuToggle = document.querySelector('.myangels-chat .chat-menu-toggle');
        const menuDropdown = document.querySelector('.myangels-chat .chat-menu-dropdown');
        const newConversationButton = document.querySelector('.myangels-chat .chat-new-conversation');
        const viewConversationsButton = document.querySelector('.myangels-chat .chat-view-conversations');
        const downloadTranscriptButton = document.querySelector('.myangels-chat .chat-download-transcript');
        const welcomeView = document.querySelector('.myangels-chat .chat-welcome');
        const welcomeStartButton = document.querySelector('.myangels-chat .chat-welcome-button');
        const messagesView = document.querySelector('.myangels-chat .chat-messages-view');
        const conversationsView = document.querySelector('.myangels-chat .chat-conversations-view');
        const messagesContainer = document.querySelector('.myangels-chat .chat-messages');
        const inputField = document.querySelector('.myangels-chat .chat-input-field');
        const sendButton = document.querySelector('.myangels-chat .chat-input-button');
        const conversationsList = document.querySelector('.myangels-chat .chat-conversations-list');

        // Get active session ID from localStorage
        function getActiveSessionId() {
            return localStorage.getItem('myangels_active_session');
        }

        // Set active session ID in localStorage
        function setActiveSessionId(sessionId) {
            if (sessionId) {
                localStorage.setItem('myangels_active_session', sessionId);
            } else {
                localStorage.removeItem('myangels_active_session');
            }
        }

        // Check if chat was open before
        function getChatOpenState() {
            return localStorage.getItem('myangels_chat_open') === 'true';
        }

        // Set chat open state 
        function setChatOpenState(isOpen) {
            localStorage.setItem('myangels_chat_open', isOpen ? 'true' : 'false');
        }

        // Check if this is the first visit
        function markFirstVisit() {
            localStorage.setItem('myangels_has_visited', 'true');
        }

        // Load conversations from storage
        function loadConversations() {
            const savedConversations = localStorage.getItem('myangels_conversations');
            if (savedConversations) {
                conversations = JSON.parse(savedConversations);
                return conversations.length > 0;
            }
            return false;
        }

        // Save conversations to storage
        function saveConversations() {
            localStorage.setItem('myangels_conversations', JSON.stringify(conversations));
        }

        // Generate UUID
        function generateUUID() {
            return crypto.randomUUID ? crypto.randomUUID() : 
                'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                    const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });
        }

        // Format time
        function formatTime(date) {
            return date.toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit',
                hour12: true
            });
        }

        // Format date for conversation list
        function formatDate(date) {
            const now = new Date();
            const diff = now - date;
            const day = 24 * 60 * 60 * 1000;
            
            if (diff < day) {
                return 'Today';
            } else if (diff < 2 * day) {
                return 'Yesterday';
            } else {
                return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
            }
        }

        // Render markdown
        function renderMarkdown(text) {
            if (!text) return '';
            
            if (typeof marked === 'undefined') {
                console.warn('Marked.js not loaded yet, returning plain text');
                return text;
            }

            // Configure marked
            marked.setOptions({
                renderer: new marked.Renderer(),
                highlight: function(code, lang) {
                    if (typeof hljs !== 'undefined' && lang && hljs.getLanguage(lang)) {
                        try {
                            return hljs.highlight(code, { language: lang }).value;
                        } catch (e) {
                            console.error('Error highlighting code:', e);
                        }
                    }
                    return code;
                },
                gfm: true,
                breaks: true,
                sanitize: false
            });

            try {
                return marked.parse(text);
            } catch (e) {
                console.error('Error parsing markdown:', e);
                return text;
            }
        }

        // Auto resize textarea
        function autoResizeTextarea(textarea) {
            textarea.style.height = 'auto';
            textarea.style.height = (textarea.scrollHeight) + 'px';
        }

        // Toggle menu
        function toggleMenu() {
            menuDropdown.classList.toggle('show');
        }

        // Scroll to bottom of messages
        function scrollToBottom(delay = 100) {
            // Use a timeout to ensure all content is rendered
            setTimeout(() => {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }, delay);
        }

        // Apply syntax highlighting to code blocks
        function applySyntaxHighlighting() {
            if (typeof hljs !== 'undefined') {
                messagesContainer.querySelectorAll('pre code').forEach((block) => {
                    hljs.highlightElement(block);
                });
            } else {
                console.warn('Highlight.js not loaded yet, skipping syntax highlighting');
                
                // Try again in a second
                setTimeout(applySyntaxHighlighting, 1000);
            }
        }

        // Open chat
        function openChat() {
            chatContainer.classList.add('open');
            chatWidget.classList.add('chat-open'); // Add class to hide toggle button
            setChatOpenState(true);
            
            // If first visit, show welcome screen
            if (isFirstVisit && conversations.length === 0) {
                welcomeView.style.display = 'flex';
                messagesView.classList.remove('active');
                conversationsView.classList.remove('active');
                markFirstVisit();
                return;
            }
            
            // If we have conversations, don't show welcome
            if (conversations.length > 0) {
                welcomeView.style.display = 'none';
                conversationsView.classList.remove('active');
                messagesView.classList.add('active');
                
                // Make sure to scroll to bottom
                scrollToBottom();
                
                // Ensure syntax highlighting is applied
                applySyntaxHighlighting();
            } else {
                // No conversations, show welcome
                welcomeView.style.display = 'flex';
                messagesView.classList.remove('active');
                conversationsView.classList.remove('active');
            }
        }

        // Close chat
        function closeChat() {
            chatContainer.classList.remove('open');
            chatWidget.classList.remove('chat-open'); // Remove class to show toggle button
            menuDropdown.classList.remove('show');
            setChatOpenState(false);
        }

        // Start new conversation
        async function startNewConversation() {
            // Generate new session ID
            currentSessionId = generateUUID();
            chatMessages = [];
            activeConversationIndex = -1;
            
            // Update active session
            setActiveSessionId(currentSessionId);
            
            // Show messages view
            welcomeView.style.display = 'none';
            conversationsView.classList.remove('active');
            messagesView.classList.add('active');
            messagesContainer.innerHTML = '';
            
            // Clear input field
            inputField.value = '';
            autoResizeTextarea(inputField);

            try {
                // Send initial empty message
                const data = [{
                    action: "loadPreviousSession",
                    sessionId: currentSessionId,
                    route: config.webhook.route,
                    metadata: { userId: "" }
                }];

                // Show loading indicator
                const loadingIndicator = createLoadingIndicator();
                messagesContainer.appendChild(loadingIndicator);

                const response = await fetch(config.webhook.url, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                const responseData = await response.json();
                
                // Remove loading indicator
                messagesContainer.removeChild(loadingIndicator);

                // Extract bot response
                const botResponse = Array.isArray(responseData) ? 
                    responseData[0].output : responseData.output;
                
                // Add bot message
                addMessage(botResponse, 'bot');
                
                // Save conversation
                saveChatState();
                
            } catch (error) {
                console.error('Error starting conversation:', error);
                
                // Show error message
                addMessage('Sorry, there was a problem connecting to the server. Please try again later.', 'bot');
            }
            
            // Focus on input field
            inputField.focus();
        }

        // Add message to chat
        function addMessage(message, sender) {
            // Create message element
            const messageEl = document.createElement('div');
            messageEl.className = `chat-message ${sender}`;
            
            // Create message bubble
            const bubbleEl = document.createElement('div');
            bubbleEl.className = 'chat-message-bubble';
            
            if (sender === 'bot') {
                // For bot messages, render markdown
                const markdownEl = document.createElement('div');
                markdownEl.className = 'chat-markdown';
                markdownEl.innerHTML = renderMarkdown(message);
                bubbleEl.appendChild(markdownEl);
            } else {
                // For user messages, use plain text
                bubbleEl.textContent = message;
            }
            
            // Create timestamp
            const timeEl = document.createElement('div');
            timeEl.className = 'chat-message-time';
            const now = new Date();
            timeEl.textContent = formatTime(now);
            
            // Assemble message
            messageEl.appendChild(bubbleEl);
            messageEl.appendChild(timeEl);
            
            // Add to container
            messagesContainer.appendChild(messageEl);
            
            // Scroll to bottom
            scrollToBottom();
            
            // Save message to transcript
            chatMessages.push({
                timestamp: formatTime(now),
                sender: sender === 'user' ? 'Visitor' : config.branding.name,
                message: message, // Save the original message text (with markdown)
                html: sender === 'bot' ? renderMarkdown(message) : null // Save the rendered HTML for bot messages
            });
            
            // Apply syntax highlighting if available
            applySyntaxHighlighting();
        }

        // Create loading indicator
        function createLoadingIndicator() {
            const loadingEl = document.createElement('div');
            loadingEl.className = 'chat-loading';
            
            const dotsEl = document.createElement('div');
            dotsEl.className = 'chat-loading-dots';
            
            for (let i = 0; i < 3; i++) {
                const dotEl = document.createElement('div');
                dotEl.className = 'chat-loading-dot';
                dotsEl.appendChild(dotEl);
            }
            
            loadingEl.appendChild(dotsEl);
            return loadingEl;
        }

        // Send message
        async function sendMessage() {
            const message = inputField.value.trim();
            if (!message) return;
            
            // Clear input
            inputField.value = '';
            autoResizeTextarea(inputField);
            
            // Add user message
            addMessage(message, 'user');
            
            // Create loading indicator
            const loadingIndicator = createLoadingIndicator();
            messagesContainer.appendChild(loadingIndicator);
            scrollToBottom();
            
            try {
                // Send message to server
                const data = {
                    action: "sendMessage",
                    sessionId: currentSessionId,
                    route: config.webhook.route,
                    chatInput: message,
                    metadata: { userId: "" }
                };
                
                const response = await fetch(config.webhook.url, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                
                const responseData = await response.json();
                
                // Remove loading indicator
                messagesContainer.removeChild(loadingIndicator);
                
                // Extract bot response
                const botResponse = Array.isArray(responseData) ? 
                    responseData[0].output : responseData.output;
                
                // Add bot message
                addMessage(botResponse, 'bot');
                
                // Save conversation
                saveChatState();
                
            } catch (error) {
                console.error('Error sending message:', error);
                
                // Remove loading indicator
                messagesContainer.removeChild(loadingIndicator);
                
                // Show error message
                addMessage('Sorry, there was a problem connecting to the server. Please try again.', 'bot');
                
                // Save conversation
                saveChatState();
            }
        }

        // Save chat state
        function saveChatState() {
            if (currentSessionId && chatMessages.length > 0) {
                // Find existing conversation or create new one
                let conversationIndex = conversations.findIndex(c => c.sessionId === currentSessionId);
                
                // Create preview text (clean from HTML)
                const lastMessage = chatMessages[chatMessages.length - 1];
                let plainText = lastMessage.message;
                
                // Strip HTML if there's rendered HTML
                if (lastMessage.sender !== 'Visitor') {
                    // Create a temporary div to strip HTML
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = plainText;
                    plainText = tempDiv.textContent || tempDiv.innerText || plainText;
                }
                
                const preview = plainText.substring(0, 60) + 
                    (plainText.length > 60 ? '...' : '');
                
                if (conversationIndex >= 0) {
                    // Update existing conversation
                    conversations[conversationIndex] = {
                        ...conversations[conversationIndex],
                        messages: chatMessages,
                        preview: preview,
                        lastUpdated: new Date().toISOString()
                    };
                } else {
                    // Create new conversation
                    conversations.unshift({
                        sessionId: currentSessionId,
                        title: `Conversation ${conversations.length + 1}`,
                        messages: chatMessages,
                        preview: preview,
                        lastUpdated: new Date().toISOString()
                    });
                    
                    // Set the active index to 0 (the new conversation)
                    activeConversationIndex = 0;
                }
                
                // Save to storage
                saveConversations();
                
                // Update active session
                setActiveSessionId(currentSessionId);
            }
        }

        // Load conversation
        function loadConversation(index) {
            if (index >= 0 && index < conversations.length) {
                activeConversationIndex = index;
                
                // Get conversation data
                const conversation = conversations[index];
                currentSessionId = conversation.sessionId;
                chatMessages = [...conversation.messages];
                
                // Update active session
                setActiveSessionId(currentSessionId);
                
                // Switch to messages view
                welcomeView.style.display = 'none';
                conversationsView.classList.remove('active');
                messagesView.classList.add('active');
                
                // Clear messages container
                messagesContainer.innerHTML = '';
                
                // Add messages
                chatMessages.forEach(msg => {
                    // Create message element
                    const messageEl = document.createElement('div');
                    messageEl.className = `chat-message ${msg.sender === 'Visitor' ? 'user' : 'bot'}`;
                    
                    // Create message bubble
                    const bubbleEl = document.createElement('div');
                    bubbleEl.className = 'chat-message-bubble';
                    
                    if (msg.sender !== 'Visitor') {
                        // Bot message with markdown
                        const markdownEl = document.createElement('div');
                        markdownEl.className = 'chat-markdown';
                        
                        // If we have pre-rendered HTML, use it, otherwise render markdown
                        if (msg.html) {
                            markdownEl.innerHTML = msg.html;
                        } else {
                            markdownEl.innerHTML = renderMarkdown(msg.message);
                            
                            // Update the saved HTML in the message object
                            msg.html = markdownEl.innerHTML;
                        }
                        
                        bubbleEl.appendChild(markdownEl);
                    } else {
                        // User message as plain text
                        bubbleEl.textContent = msg.message;
                    }
                    
                    // Create timestamp
                    const timeEl = document.createElement('div');
                    timeEl.className = 'chat-message-time';
                    timeEl.textContent = msg.timestamp;
                    
                    // Assemble message
                    messageEl.appendChild(bubbleEl);
                    messageEl.appendChild(timeEl);
                    
                    // Add to container
                    messagesContainer.appendChild(messageEl);
                });
                
                // Scroll to bottom with a longer delay to ensure all content is rendered
                scrollToBottom(300);
                
                // Apply syntax highlighting
                applySyntaxHighlighting();
                
                // Save conversation to ensure HTML is stored
                saveChatState();
            }
        }

        // Render conversations list
        function renderConversationsList() {
            // Clear list
            conversationsList.innerHTML = '';
            
            if (conversations.length === 0) {
                // Show empty state
                const emptyEl = document.createElement('div');
                emptyEl.className = 'chat-empty-state';
                emptyEl.innerHTML = `
                    <svg class="chat-empty-icon" xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                    </svg>
                    <p class="chat-empty-text">No conversations yet</p>
                    <button class="chat-welcome-button">Start a new conversation</button>
                `;
                
                conversationsList.appendChild(emptyEl);
                
                // Add event listener to button
                const newChatBtn = emptyEl.querySelector('.chat-welcome-button');
                newChatBtn.addEventListener('click', startNewConversation);
                
                return;
            }
            
            // Add conversation items
            conversations.forEach((conversation, index) => {
                const date = new Date(conversation.lastUpdated);
                
                const itemEl = document.createElement('div');
                itemEl.className = `chat-conversation-item${index === activeConversationIndex ? ' active' : ''}`;
                itemEl.innerHTML = `
                    <div class="chat-conversation-content">
                        <div class="chat-conversation-title">${conversation.title}</div>
                        <div class="chat-conversation-preview">${conversation.preview}</div>
                    </div>
                    <div class="chat-conversation-time">${formatDate(date)}</div>
                `;
                
                // Add click handler
                itemEl.addEventListener('click', () => {
                    loadConversation(index);
                });
                
                conversationsList.appendChild(itemEl);
            });
        }

        // Show conversations view
        function showConversationsView() {
            welcomeView.style.display = 'none';
            messagesView.classList.remove('active');
            conversationsView.classList.add('active');
            
            // Render conversations
            renderConversationsList();
        }

        // Download transcript
        function downloadTranscript() {
            if (!currentSessionId || chatMessages.length === 0) {
                console.warn('No conversation to download');
                return;
            }
            
            // Create transcript text
            let transcript = `Conversation with ${config.branding.name}\n`;
            transcript += `Date: ${new Date().toLocaleDateString()}\n`;
            transcript += `${'-'.repeat(40)}\n\n`;
            
            chatMessages.forEach(msg => {
                // Get plain text from messages
                let msgText = msg.message;
                if (msg.sender !== 'Visitor' && msg.message.includes('<')) {
                    // Create a temporary div to strip HTML
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = msgText;
                    msgText = tempDiv.textContent || tempDiv.innerText || msgText;
                }
                
                transcript += `[${msg.timestamp}] ${msg.sender}: ${msgText}\n\n`;
            });
            
            transcript += `\n${'-'.repeat(40)}\n`;
            transcript += `Generated on ${new Date().toLocaleString()}`;
            
            // Create and trigger download
            const blob = new Blob([transcript], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${config.branding.name.replace(/\s+/g, '-')}-conversation-${new Date().toISOString().slice(0, 10)}.txt`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        // Check if we should automatically restore previous session
        function checkAndRestorePreviousSession() {
            // Load conversations
            const hasConversations = loadConversations();
            
            if (hasConversations) {
                // Check if chat was previously open
                const wasOpen = getChatOpenState();
                
                // Get active session ID
                const activeSessionId = getActiveSessionId();
                
                if (activeSessionId) {
                    // Find the active conversation
                    const sessionIndex = conversations.findIndex(c => c.sessionId === activeSessionId);
                    
                    if (sessionIndex >= 0) {
                        // Load this conversation
                        loadConversation(sessionIndex);
                        return wasOpen;
                    }
                }
                
                // If no active session or it wasn't found, load most recent conversation
                loadConversation(0);
                return wasOpen;
            }
            
            return false;
        }

        // Initialize the chat
        function initialize() {
            // Check if we should restore previous session and if chat was open
            const shouldOpen = checkAndRestorePreviousSession();
            
            // If we have a previous session and chat was open before, automatically open the chat
            if (shouldOpen) {
                openChat();
            }
            
            // Add event listeners
            toggleButton.addEventListener('click', openChat);
            closeButton.addEventListener('click', closeChat);
            menuToggle.addEventListener('click', toggleMenu);
            newConversationButton.addEventListener('click', () => {
                startNewConversation();
                menuDropdown.classList.remove('show');
            });
            viewConversationsButton.addEventListener('click', () => {
                showConversationsView();
                menuDropdown.classList.remove('show');
            });
            downloadTranscriptButton.addEventListener('click', () => {
                downloadTranscript();
                menuDropdown.classList.remove('show');
            });
            welcomeStartButton.addEventListener('click', startNewConversation);
            
            // Input and send handlers
            inputField.addEventListener('input', () => {
                autoResizeTextarea(inputField);
            });
            
            inputField.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
            
            sendButton.addEventListener('click', sendMessage);
            
            // Close menu when clicking outside
            document.addEventListener('click', (e) => {
                if (!menuToggle.contains(e.target) && !menuDropdown.contains(e.target)) {
                    menuDropdown.classList.remove('show');
                }
            });
        }

        // Initialize the chat
        initialize();
    }
})();
    </script>
</body>
</html>
